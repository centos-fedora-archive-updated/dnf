From 0d44a5b1b84a0ae2f05a2fe45c48848de199e0a2 Mon Sep 17 00:00:00 2001
From: Daniel Mach <dmach@redhat.com>
Date: Thu, 13 Jul 2017 06:12:01 -0400
Subject: [PATCH 3/4] Use ModuleSubject in all module actions.

---
 dnf/cli/commands/upgrade.py |   2 +-
 dnf/modules.py              | 281 +++++++++++++++-----------------------------
 2 files changed, 94 insertions(+), 189 deletions(-)

diff --git a/dnf/cli/commands/upgrade.py b/dnf/cli/commands/upgrade.py
index b0ae225b..49e6c32e 100644
--- a/dnf/cli/commands/upgrade.py
+++ b/dnf/cli/commands/upgrade.py
@@ -80,7 +80,7 @@ class UpgradeCommand(commands.Command):
 
     def _update_modules_all(self):
         self.cli.demands.transaction_display = self.base.repo_module_dict.transaction_callback
-        self.base.repo_module_dict.upgrade(list(self.base.repo_module_dict.keys()))
+        self.base.repo_module_dict.upgrade_all()
 
     def _update_modules(self):
         self.cli.demands.transaction_display = self.base.repo_module_dict.transaction_callback
diff --git a/dnf/modules.py b/dnf/modules.py
index 7367b327..5891148c 100644
--- a/dnf/modules.py
+++ b/dnf/modules.py
@@ -33,6 +33,7 @@ from dnf.conf.read import ModuleReader
 from dnf.exceptions import Error
 from dnf.i18n import _
 from dnf.pycomp import ConfigParser
+from dnf.subject import Subject
 from dnf.util import logger
 
 
@@ -50,7 +51,7 @@ INVALID_MODULE_ERR = 11
 LOWER_VERSION_INFO = 12
 NOTHING_TO_SHOW = 13
 PARSING_ERR = 14
-HORRIBLE_HACK_WARN = 15
+PROFILE_NOT_INSTALLED = 15
 
 
 module_errors = {
@@ -68,15 +69,9 @@ module_errors = {
     LOWER_VERSION_INFO: "Using lower version due to missing profile in latest version",
     NOTHING_TO_SHOW: "Nothing to show",
     PARSING_ERR: "Probable parsing problem of {}, try specifying MODULE-STREAM-VERSION",
-    HORRIBLE_HACK_WARN: "DNF has made a horrible hack by guessing "
-                        "default stream instead of using (non-existing) "
-                        "system-profile"
+    PROFILE_NOT_INSTALLED: "Profile not installed: {}",
 }
 
-default_profile = "default"
-name_profile_delimiter = "/"
-name_stream_version_delimiter = "-"
-
 
 class RepoModuleVersion(object):
     def __init__(self, module_metadata, base, repo):
@@ -100,6 +95,9 @@ class RepoModuleVersion(object):
         for single_nevra in self.profile_nevra(profile):
             self.base.install(single_nevra, reponame=self.repo.id, forms=hawkey.FORM_NEVR)
 
+        repo_module = self.parent.parent
+        repo_module.parent.transaction_callback.repo_modules.append(repo_module)
+
     def upgrade(self, profiles):
         self.parent.parent.installed_repo_module_version = self
         for profile in profiles:
@@ -109,6 +107,9 @@ class RepoModuleVersion(object):
             for single_nevra in self.profile_nevra(profile):
                 self.base.upgrade(single_nevra, reponame=self.repo.id)
 
+        repo_module = self.parent.parent
+        repo_module.parent.transaction_callback.repo_modules.append(repo_module)
+
     def nevra(self):
         result = self.module_metadata.artifacts.rpms
         # HACK: remove epoch to make filter(nevra=...) work
@@ -119,23 +120,15 @@ class RepoModuleVersion(object):
         return self.module_metadata.profiles[profile].rpms
 
     def profile_nevra(self, profile):
-        profile_rpms = self.rpms(profile)
-        profile_nevra = set()
-        for single_nevra in self.nevra():
-            name = self.get_name_from_nevra(single_nevra)
-            if name in profile_rpms:
-                nevr, arch = self.split_to_nevr_arch(single_nevra)
-                profile_nevra.add(nevr)
-        return profile_nevra
-
-    def get_name_from_nevra(self, nevra):
-        nevr, arch = self.split_to_nevr_arch(nevra)
-        name, ev, release = nevr.rsplit(name_stream_version_delimiter, 2)
-        return name
-
-    @staticmethod
-    def split_to_nevr_arch(nevra):
-        return nevra.rsplit('.', 1)
+        result = set()
+        rpms = set(self.rpms(profile))
+        for nevra in self.nevra():
+            subj = Subject(nevra)
+            nevra_obj = list(subj.get_nevra_possibilities(hawkey.FORM_NEVRA))[0]
+            if nevra_obj.name not in rpms:
+                continue
+            result.add("{}-{}".format(nevra_obj.name, nevra_obj.evr()))
+        return result
 
     @property
     def version(self):
@@ -179,21 +172,6 @@ class RepoModuleStream(OrderedDict):
     def latest(self):
         return max(self.values())
 
-    def install(self, version, profile):
-        self[int(version or self.latest().version)].install(profile)
-
-    def upgrade(self, installed_version, profiles):
-        for repo_module_version in sorted(self.values(), reverse=True):
-            try:
-                if not installed_version or repo_module_version.version == installed_version:
-                    repo_module_version.install(profiles)
-                else:
-                    repo_module_version.upgrade(profiles)
-                break
-            except Error as e:
-                logger.warning(e)
-                logger.warning(module_errors[LOWER_VERSION_INFO])
-
 
 class RepoModule(OrderedDict):
     def __init__(self):
@@ -239,21 +217,6 @@ class RepoModule(OrderedDict):
         self.conf.enabled = False
         self.write_conf_to_file()
 
-    def install(self, stream, version, profile):
-        self.parent.transaction_callback.repo_modules.append(self)
-
-        try:
-            self[stream].install(version, profile)
-        except KeyError:
-            raise Error(module_errors[NO_STREAM_ERR].format(stream, self.name))
-
-    def upgrade(self):
-        self.parent.transaction_callback.repo_modules.append(self)
-        try:
-            self[self.conf.stream].upgrade(self.conf.version, self.conf.profiles)
-        except KeyError:
-            raise Error(module_errors[NO_STREAM_ERR].format(self.conf.stream, self.name))
-
     def write_conf_to_file(self):
         output_file = os.path.join(self.parent.get_modules_dir(), "%s.module" % self.conf.name)
 
@@ -288,62 +251,106 @@ class RepoModuleDict(OrderedDict):
             if not stream:
                 # TODO: read default stream from system profile
                 stream = "f26"
+                if name == "httpd":
+                    stream = "2.4"
 
             if not stream:
                 return None
 
             repo_module_stream = repo_module[stream]
 
-            if version:
+            if repo_module.conf and repo_module.conf.locked and repo_module.conf.version is not None:
+                # if module version is locked, ignore user input
+                # TODO: print warning if locked version != latest or provided
+                repo_module_version = repo_module_stream[repo_module.conf.version]
+            elif version:
                 repo_module_version = repo_module_stream[version]
             else:
                 # if version is not specified, pick the latest
                 repo_module_version = repo_module_stream.latest()
 
             # TODO: arch
+            # TODO: platform module
 
             return repo_module_version
         except KeyError:
             pass
         return None
 
-    def enable(self, module_ns, assumeyes, assumeno=False):
-        name, stream, version, _ = self.parse_module_nsvp(module_ns)
-        try:
-            self[name].enable(stream, assumeyes, assumeno)
-        except KeyError:
-            logger.error(module_errors[NO_MODULE_ERR].format(name))
+    def enable(self, pkg_spec, assumeyes, assumeno=False):
+        subj = ModuleSubject(pkg_spec)
+        module_version, nsvap = subj.find_module_version(self)
+
+        if not module_version:
+            logger.error(module_errors[NO_MODULE_ERR].format(pkg_spec))
+            return
+
+        self[module_version.name].enable(module_version.stream, assumeyes, assumeno)
 
-    def disable(self, module_name):
+    def disable(self, pkg_spec):
+        subj = ModuleSubject(pkg_spec)
+        module_version, nsvap = subj.find_module_version(self)
+
+        if module_version:
+            repo_module = module_version.parent.parent
+            repo_module.disable()
+            return
+
+        # if lookup by pkg_spec failed, try disabling module by name
         try:
-            self[module_name].disable()
+            self[pkg_spec].disable()
         except KeyError:
-            logger.warning(_("No such module: {}, try specifying only module name"
-                             .format(module_name)))
-
-    def install(self, specs, autoenable=False):
-        for module in specs:
-            name, stream, version, profile = self.parse_module_nsvp(module)
-            if name not in self:
-                logger.error(module_errors[NO_MODULE_ERR].format(name))
+            logger.warning(module_errors[NO_MODULE_ERR].format(pkg_spec))
+
+    def install(self, pkg_specs, autoenable=False):
+        for pkg_spec in pkg_specs:
+            subj = ModuleSubject(pkg_spec)
+            module_version, nsvap = subj.find_module_version(self)
+
+            if not module_version:
+                logger.error(module_errors[NO_MODULE_ERR].format(pkg_spec))
                 continue
 
             if autoenable:
-                self.enable(module, True)
+                # TODO: nsvap depends on enabled module :(
+                self.enable(nsvap.name, True)
 
-            self[name].install(stream, version, profile)
+            module_version.install(nsvap.profile)
 
-    def upgrade(self, specs):
-        for name in specs:
-            if name not in self:
-                logger.error(module_errors[NO_MODULE_ERR].format(name))
-                continue
+    def upgrade(self, pkg_specs):
+        for pkg_spec in pkg_specs:
+            subj = ModuleSubject(pkg_spec)
+            module_version, nsvap = subj.find_module_version(self)
 
-            any_profile_installed = self[name].conf and self[name].conf.profiles
-            if not any_profile_installed:
+            if not module_version:
+                logger.error(module_errors[NO_MODULE_ERR].format(pkg_spec))
                 continue
 
-            self[name].upgrade()
+            conf = self[nsvap.name].conf
+            if conf:
+                installed_profiles = conf.profiles
+            else:
+                installed_profiles = []
+            if nsvap.profile:
+                if nsvap.profile not in installed_profiles:
+                    logger.error(module_errors[PROFILE_NOT_INSTALLED].format(pkg_spec))
+                    continue
+                profiles = [nsvap.profile]
+            else:
+                profiles = installed_profiles
+
+            module_version.upgrade(profiles)
+
+    def upgrade_all(self):
+        modules = []
+        for module_name, repo_module in self.items():
+            if not repo_module.conf:
+                continue
+            if not repo_module.conf.enabled:
+                continue
+            modules.append(module_name)
+        modules.sort()
+        self.upgrade(modules)
 
     def load_modules(self, repo):
         loader = ModuleMetadataLoader(repo)
@@ -379,43 +386,10 @@ class RepoModuleDict(OrderedDict):
         finally:
             os.umask(oumask)
 
-    def get_modules_by_name_stream_version(self, name, stream=None, version=None):
-        filtered_names = fnmatch.filter(self, name)
-        if not filtered_names:
-            raise Error(module_errors[NO_MODULE_ERR].format(name))
-
-        filtered_streams = []
-        module_metadata = []
-        if stream is not None:
-            for filtered_name in filtered_names:
-                filtered_streams.extend(fnmatch.filter(self[filtered_name], stream))
-
-        if not filtered_streams:
-            for filtered_name in filtered_names:
-                filtered_streams.extend(list(self[filtered_name].keys()))
-
-        for filtered_name in filtered_names:
-            for filtered_stream in filtered_streams:
-                for module_version in self[filtered_name][filtered_stream].values():
-                    if version is None:
-                        module_metadata.append(module_version.module_metadata)
-                    elif fnmatch.fnmatch(str(module_version.version), version):
-                        module_metadata.append(module_version.module_metadata)
-
-        if not module_metadata:
-            raise Error(module_errors[NO_METADATA_ERR].format(name))
-
-        return module_metadata
-
-    def get_full_description(self, module_nsvp):
-        name, stream, version = self.parse_module_nsv(module_nsvp)
-        module_metadata = self.get_modules_by_name_stream_version(name, stream, version)
-        module_metadata = sorted(module_metadata, key=lambda data: data.version)
-
-        ret = ""
-        for data in module_metadata:
-            ret += data.dumps() + "\n"
-        return ret[:-1]
+    def get_full_description(self, pkg_spec):
+        subj = ModuleSubject(pkg_spec)
+        module_version, nsvap = subj.find_module_version(self)
+        return module_version.module_metadata.dumps().rstrip("\n")
 
     def get_brief_description_all(self, module_n):
         return self.get_brief_description_by_name(module_n, [stream for module in self.values()
@@ -496,75 +470,6 @@ class RepoModuleDict(OrderedDict):
 
         return table
 
-    def parse_module_nsvp(self, user_input):
-        def parse_module_np(user_input):
-            try:
-                name, profile = user_input.split(name_profile_delimiter, 1)
-            except ValueError:
-                name = user_input
-                profile = default_profile
-
-            return name, profile
-
-        nsv, profile = parse_module_np(user_input)
-        name, stream, version = self.parse_module_nsv(nsv)
-
-        return name, stream, version, profile
-
-    def parse_module_nsv(self, user_input):
-        # TODO dehack
-        def get_default_stream(releasever=None):
-
-            def get_split_lower_values(line):
-                line_without_crlf = line[:-1]
-                return line_without_crlf.lower().split("=")
-
-            values = {}
-            with open("/etc/os-release") as f:
-                for line in f.readlines():
-                    option, value = get_split_lower_values(line)
-                    values[option] = value
-
-            # higher management order
-            logger.warning(module_errors[HORRIBLE_HACK_WARN])
-            return "f{}".format(releasever) if releasever is not None \
-                else "{}{}".format(values["id"][0], values["version_id"])
-
-        def determine_stream_or_version(stream_or_version):
-            filtered_names = fnmatch.filter(self, name)
-            for filtered_name in filtered_names:
-                if fnmatch.filter(self[filtered_name], stream_or_version):
-                    return name, stream_or_version, None
-
-            return name, get_default_stream(self.base.conf.releasever), stream_or_version
-
-        try:
-            name, stream, version = user_input.rsplit(name_stream_version_delimiter, 2)
-
-            if not fnmatch.filter(self, name) \
-                    and fnmatch.filter(self, "{}-{}".format(name, stream)):
-                name = "{}-{}".format(name, stream)
-                return determine_stream_or_version(version)
-            elif not fnmatch.filter(self, name) \
-                    and not fnmatch.filter(self, "{}-{}".format(name, stream)) \
-                    and fnmatch.filter(self, "{}-{}-{}".format(name, stream, version)):
-                return name, get_default_stream(self.base.conf.releasever), None
-
-            return name, stream, version
-        except ValueError:
-            try:
-                name, stream = user_input.rsplit(name_stream_version_delimiter, 1)
-
-                if not fnmatch.filter(self, name) \
-                        and fnmatch.filter(self, "{}-{}".format(name, stream)):
-                    return "{}-{}".format(name, stream), \
-                           get_default_stream(self.base.conf.releasever), \
-                           None
-
-                return determine_stream_or_version(stream)
-            except ValueError:
-                return user_input, get_default_stream(self.base.conf.releasever), None
-
 
 class ModuleMetadataLoader(object):
     def __init__(self, repo=None):
-- 
2.13.2

